@page "/"
@using SolanaPaper.Data.Models
@using SolanaPaper.Data.Repositories
@using SolanaPaper.Services
@using SolanaPaper.Services.Solana
@using SolanaPaper.Data.Models.ModelBuilders;
@using TradingView.Blazor;
@using TradingView.Blazor.Models
@using System.Net;
@using System.Text;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<TradingViewChart @ref=myChart />


@code
{
    [Inject]
    OhlcvRepository ohlcvRepository { get; set; }

    BitQueryService bitQueryService = new BitQueryService();

    TradingViewChart? myChart;

    string mintAddress = "EqFvmyocakvpTc14hYxdXDno81bLnUaQjwmpyHrLpump";
    string programID = "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P";
    string interval = "minutes";
    string limit = "160";
    string count = "1";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        try
        {
            List<Ohlcv> ohlcvEntries = new List<Ohlcv>();
            // query from mongo before bitquery
            var ohlcvDTOs = await ohlcvRepository.GetByContactAddress(mintAddress);
            ohlcvEntries.AddRange(OhlcvBuilder.OhlcvModelBuilder(ohlcvDTOs));

            if (ohlcvEntries.Count < Convert.ToInt32(limit))
            {
                Console.WriteLine("Fetching from BitQuery...");
                var ohlcv = await bitQueryService.GetOHLCV(mintAddress, programID, interval, (Convert.ToInt32(limit) - ohlcvEntries.Count).ToString(), "1");
                var newOhlcvDTOs = OhlcvDTOBuilder.OhlcvModelBuilder(ohlcv, mintAddress);
                await ohlcvRepository.Create(newOhlcvDTOs);
                ohlcvEntries.AddRange(OhlcvBuilder.OhlcvModelBuilder(newOhlcvDTOs));
            }

           

            ChartData data = new()
                {
                    ChartEntries = new List<IChartEntry>(ohlcvEntries = ohlcvEntries
        .GroupBy(entry => entry.Time)
        .Select(group => group.First())
        .OrderBy(entry => entry.Time) // Ensure chronological order
        .ToList()),
                    MarkerData = new List<Marker>()
                };

            Console.WriteLine(data.ChartEntries);

            foreach (var entry in data.ChartEntries)
            {
                Console.WriteLine(entry.DisplayPrice);
                Console.WriteLine($"Time: {entry.Time}, Price: {entry.DisplayPrice}");

            }

            Console.WriteLine(data.ChartEntries.Count);

            // Optionally define options
            ChartOptions options = new()
                {

                    TimeScaleSecondsVisible = true,
                    Width = 800, // Fixed width for debugging
                    Height = 400 // Add a fixed height

                };

            if (myChart != null)
            {
                Console.WriteLine("Loading chart...");
                await myChart.LoadChartAsync(data, options);
                Console.WriteLine("Chart loaded successfully.");
            }

            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chart: {ex.Message}");
        }
    }

    public async Task UpdateChart(ChartData updatedChartData)
    {
        await myChart.UpdateChartAsync(updatedChartData);
    }

}